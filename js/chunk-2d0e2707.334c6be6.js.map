{"version":3,"sources":["webpack:///./src/views/games/wormRace/js/laws.js"],"names":["gm","engine","GeneralMethods","cc","CollisionChecker","Law","gravity","effects","this","applyToAllPoints","point","update_x_xd","airResistance","mult","minus","x_old","x","peristalsis","benders","gripper","ground","util","active","on","forEach","bender","angle","rigidityConstant","elements","e","xInB","links","setStatic","setTimeout","setActive","finishLine","worms","finishBox","winner","finished","worm","reports","checkProximityTo","length","collisionPair","convexSet","structName","belongsTo","stuff","name"],"mappings":"sKACMA,EAAKC,IAAOC,eACZC,EAAKF,IAAOG,iBACZC,EAAMJ,IAAOI,IAIJ,cACbC,QAAU,WACR,IAAIA,EAAU,IAAID,EAAI,WAMtB,OALAC,EAAQC,QAAU,WAChBC,KAAKC,kBAAiB,SAASC,GAC7BA,EAAMC,YAAY,CAAC,EAAG,WAGnBL,EAPC,GAUVM,cAAgB,WACd,IAAIA,EAAgB,IAAIP,EAAI,iBAO5B,OALAO,EAAcL,QAAU,WACtBC,KAAKC,kBAAiB,SAASC,GAC7BA,EAAMC,YAAYX,EAAGa,KAAKb,EAAGc,MAAMJ,EAAMK,MAAOL,EAAMM,GAAI,WAGvDJ,EARO,GAWhBK,YAAa,SAASC,EAASC,EAASC,EAAQC,GAC9C,IAAIJ,EAAc,IAAIZ,EAAI,eAuC1B,OArCAY,EAAYI,KAAOA,EACnBJ,EAAYC,QAAUA,EACtBD,EAAYE,QAAUA,EACtBF,EAAYK,QAAS,EAErBL,EAAYV,QAAU,WAChBU,EAAYI,KAAKE,GACdN,EAAYK,SACfL,EAAYC,QAAQM,SAAQ,SAAAC,GAC1BA,EAAOC,MAAQ,EACfD,EAAOE,iBAAmB,OAE5BP,EAAOQ,SAASJ,SAAQ,SAAAK,GAClB1B,EAAG2B,KAAKX,EAAQH,EAAGa,EAAEE,OAAS,IAChCd,EAAYK,QAAS,EACrBL,EAAYE,QAAQa,YACpBC,YAAW,WACThB,EAAYE,QAAQe,YACpBjB,EAAYC,QAAQM,SAAQ,SAAAC,GAC1BA,EAAOC,MAAQ,EACfD,EAAOE,iBAAmB,UAE3B,KACHM,YAAW,WACThB,EAAYK,QAAS,IACpB,WAKTL,EAAYC,QAAQM,SAAQ,SAAAC,GAC1BA,EAAOC,MAAQ,EACfD,EAAOE,iBAAmB,QAE5BV,EAAYE,QAAQe,cAGjBjB,GAGTkB,WAAY,SAASC,EAAOC,EAAWC,GACrC,IAAIH,EAAa,IAAI9B,EAAI,cAsBzB,OArBA8B,EAAWC,MAAQA,EACnBD,EAAWG,OAASA,EACpBH,EAAWE,UAAYA,EACvBF,EAAWI,UAAW,EAEtBJ,EAAW5B,QAAU,WACnB4B,EAAWC,MAAMZ,SAAQ,SAAAgB,GACvB,IAAKL,EAAWI,SAAU,CACxB,IAAIE,EAAUD,EAAKE,iBAAiBL,EAAW,GAC3CI,EAAQE,OAAS,GACnBF,EAAQ,GAAGG,cAAcpB,SAAQ,SAAAqB,GAC/B,IAAIC,EAAaD,EAAUE,UAAU,GAAGC,MAAMC,KAC5B,SAAdH,GAAuC,SAAdA,IAC3BX,EAAWG,OAAOE,KAAOM,EACzBX,EAAWI,UAAW,WAO3BJ","file":"js/chunk-2d0e2707.334c6be6.js","sourcesContent":["import engine from \"genesis-tubs-engine\";\nconst gm = engine.GeneralMethods;\nconst cc = engine.CollisionChecker;\nconst Law = engine.Law;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////\nexport default {\n  gravity: (function() {\n    var gravity = new Law(\"Gravity\");\n    gravity.effects = function() {\n      this.applyToAllPoints(function(point) {\n        point.update_x_xd([0, 0.005]);\n      });\n    };\n    return gravity;\n  })(),\n\n  airResistance: (function() {\n    var airResistance = new Law(\"AirResistance\");\n    //airResistance.frictionalConstant=0.001;\n    airResistance.effects = function() {\n      this.applyToAllPoints(function(point) {\n        point.update_x_xd(gm.mult(gm.minus(point.x_old, point.x), 0.00001));\n      });\n    };\n    return airResistance;\n  })(),\n\n  peristalsis: function(benders, gripper, ground, util) {\n    var peristalsis = new Law(\"peristalsis\");\n\n    peristalsis.util = util;\n    peristalsis.benders = benders;\n    peristalsis.gripper = gripper;\n    peristalsis.active = false;\n\n    peristalsis.effects = function() {\n      if (peristalsis.util.on) {\n        if (!peristalsis.active) {\n          peristalsis.benders.forEach(bender => {\n            bender.angle = 4;\n            bender.rigidityConstant = 0.05;\n          });\n          ground.elements.forEach(e => {\n            if (cc.xInB(gripper.x, e.links) < 1) {\n              peristalsis.active = true;\n              peristalsis.gripper.setStatic();\n              setTimeout(() => {\n                peristalsis.gripper.setActive();\n                peristalsis.benders.forEach(bender => {\n                  bender.angle = 3;\n                  bender.rigidityConstant = 0.005;\n                });\n              }, 700);\n              setTimeout(() => {\n                peristalsis.active = false;\n              }, 1000);\n            }\n          });\n        }\n      } else {\n        peristalsis.benders.forEach(bender => {\n          bender.angle = 3;\n          bender.rigidityConstant = 0.005;\n        });\n        peristalsis.gripper.setActive();\n      }\n    };\n    return peristalsis;\n  },\n\n  finishLine: function(worms, finishBox, winner) {\n    var finishLine = new Law(\"finishLine\");\n    finishLine.worms = worms;\n    finishLine.winner = winner;\n    finishLine.finishBox = finishBox;\n    finishLine.finished = false;\n\n    finishLine.effects = function() {\n      finishLine.worms.forEach(worm => {\n        if (!finishLine.finished) {\n          var reports = worm.checkProximityTo(finishBox, 0);\n          if (reports.length > 0) {\n            reports[0].collisionPair.forEach(convexSet => {\n              var structName = convexSet.belongsTo[0].stuff.name;\n              if (structName == \"worm1\" || structName == \"worm2\") {\n                finishLine.winner.worm = structName;\n                finishLine.finished = true;\n              }\n            });\n          }\n        }\n      });\n    };\n    return finishLine;\n  }\n};\n"],"sourceRoot":""}